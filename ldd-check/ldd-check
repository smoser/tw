#!/bin/sh
# shellcheck disable=SC2317,SC2166,SC3043,SC2162,SC2086
set +x
set -f
info() { echo "INFO[ldd-check]:" "$@"; }
error() { echo "ERROR[ldd-check]:" "$@"; exit 1; }
fail() { echo "FAIL[ldd-check]:" "$@"; fails=$((fails+1)); }
pass() { echo "PASS[ldd-check]:" "$@"; passes=$((passes+1)); }
cleanup() { [ -n "$tmpd" -o -z "$tmpd" ] && return 0; rm -Rf "$tmpd"; }

files=""
packages=""
VERBOSE=false

while [ $# -ne 0 ]; do
    case "$1" in
        --files=*) files="${files} ${1#*=}";;
        --files) files="${files} $2"; shift;;
        --packages=*)
            if [ "${1#*=}" = "none" ]; then
                packages=""
            else
                packages="${packages} ${1#*=}"
            fi
            ;;
        --packages)
            if [ "$2" = "none" ]; then
                packages=""
            else
                packages="${packages} $2"
            fi
            shift;;
        --verbose=*) VERBOSE=${1#*=};;
        --verbose) VERBOSE=$2; shift;;
        --*) error "Unknown argument '$1'";;
    esac
    shift
done
files=${files# }
packages=${packages# }

case "$VERBOSE" in
  true|false) :;;
  *) error "--verbose must be 'true' or 'false'. found '$VERBOSE'";;
esac

[ -n "${files}${packages}" ] || error "No files or packages specified"

tmpd=$(mktemp -d) || fail "ERROR: failed to create tmpdir"
trap cleanup EXIT

export LANG=C

vmsg() {
  [ "$VERBOSE" = "false" ] || echo "$@"
}

failormsg() {
  local cond="$1" msg="$2"
  case "$cond" in
    true|false) :;;
    *) error "cond=$cond - expected true or false";;
  esac
  [ "$cond" = "true" ] && fail "$msg"
  vmsg "$msg"
}

check_output() {
  local outf="$1" errf="$2"
  missing=$(awk \
    '$0 ~ /=> not found/ { miss = miss " " $1; };
     END { printf("%s\n", miss); }' "$outf") ||
       error "$f: parsing with awk failed $?";
  if [ "$VERBOSE" = "true" ]; then
    echo "> $ ldd $f"
    sed 's,^,> ,' "$outf"
  fi
  if [ -n "$missing" ]; then
      fail "$f: missing ${missing# }"
  else
      pass "$f"
  fi
}

check_file() {
  local f="$1" insist_dyn="$2" rc="0"
  local outf="$tmpd/ldd.stdout" errf="$tmpd/ldd.sterr"
  local ld_library_path="$LD_LIBRARY_PATH"

  if [ ! -e "$f" ]; then
    failormsg "$insist_dyn" "$f: did not exist"
    return 0
  fi
  if [ ! -f "$f" ]; then
    failormsg "$insist_dyn" "$f: is not a file"
    return 0
  fi

  case "$f" in
    *python*site-packages*)
      [ -n "$ld_library_path" ] && ld_library_path=$ld_library_path:
      ld_library_path="${ld_library_path}$(dirname "$f")"
      vmsg "Added python site package directory to ld_library_path, result is $ld_library_path"
  esac

  LD_LIBRARY_PATH="$ld_library_path" ldd "$f" >"$outf" 2>"$errf" || rc=$?

  if [ $rc -eq 1 ]; then
    if grep -q 'not a dynamic executable' "$errf"; then
      failormsg "$insist_dyn" "$f: not a dynamic exectuable"
      return 0
    fi
    echo "> $ ldd $f"
    sed 's,^,> ,' "$outf" "$errf"
    error "$f: ldd exited $rc"
  elif [ $rc -ne 0 ]; then
    echo "> $ ldd $f"
    sed 's,^,> ,' "$outf" "$errf"
    error "$1: unexpected exit code $rc"
  fi

  check_output "$outf" "$errf"
}

test_files_in() {
  local f=""
  echo "[ldd-check] Testing binaries in package $pkg"
  apk info -eq "$pkg" > /dev/null ||
    error "Package $pkg is not installed";
  apk info -Lq "$pkg" > "$tmpd/$pkg.list"
  while read f; do
    [ -n "$f" ] || continue
    check_file "/$f" false
  done < "$tmpd/$pkg.list"
}

fails=0
passes=0
set -- $files
for f in "$@"; do
  check_file "$f" true
done
set -- $packages
for pkg in "$@"; do
  test_files_in "$pkg"
done
info "tested $((passes+fails)) files with ldd." \
  "$passes passes. $fails fails."
exit $fails
